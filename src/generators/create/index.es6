import { Base } from 'yeoman-generator';
import * as github from '../shared/github';
import merge from 'lodash.merge';
import find from 'lodash.find';
import path from 'path';

class GitCreateGenerator extends Base {

  constructor(...args) {
    super(...args);

    this.option('skip-prompt', {
      type: String,
      required: false,
      alias: 's',
      desc: 'Skip prompting.  You will either need to supply all arguments or the defaults will be used.'
    });

    this.option('autoinit', {
      type: String,
      alias: 'a',
      defaults: false,
      desc: 'AutoInit: Add license and README to remote repository'
    });

    this.option('user', {
      type: String,
      alias: 'o',
      desc: 'Github Username. Creates the repository on the user',
      defaults: false
    });

    this.option('org', {
      type: String,
      alias: 'o',
      desc: 'Organization. Creates the repository on the org not the user',
      defaults: false
    });

    this.option('name', {
      type: String,
      alias: 'n',
      desc: 'Repository Name',
      defaults: path.basename(process.cwd())
    });

    this.option('description', {
      type: String,
      alias: 'd',
      desc: 'Repository Description',
      defaults: 'Repository generated by generator-github-create'
    });

    this.option('private', {
      type: String,
      alias: 'd',
      desc: 'Repository Access.  private|public',
      defaults: false
    });

    this.option('license', {
      type: String,
      alias: 'l',
      desc: 'Repository License.  isc|mit|apache',
      defaults: 'isc'
    });

    this.config.set('create', merge(this.config.get('create'), {
      'skip-prompt': this.options['skip-prompt'],
      autoinit: this.options.autoinit,
      name: this.options.name,
      description: this.options.description,
      private: this.options.private,
      license: this.options.license,
      org: this.options.org,
      user: this.options.user
    }));
  }

  initializing() {

    //Authenticate Github API
    if (!github.get()) {
      this.composeWith('github-create:authenticate');
    }

    let config = this.config.get('create');



  }

  prompting() {
    let config = this.config.get('create');
    if (config['skip-prompt']) {
      return true;
    }
    let prompts;
    return github.getRepos(config)
      .then(repos => {
        prompts = [
          {
            name: 'name',
            message: 'Repository Name',
            validate: (input) => { return ((find(repos, { name: input })) ? input + ' repository exists.' : true); },
            default: config.name
          },
          {
            name: 'description',
            message: 'Repository Description',
            default: config.description
          },
          {
            type: 'list',
            name: 'private',
            message: 'Access',
            default: config.private,
            choices: [
              {
                name: 'Public',
                value: false
              },
              {
                name: 'Private - You have to pay for this',
                value: true
              }
            ]
          },
          {
            when: (answers) => { return config.autoinit; },
            type: 'list',
            name: 'license',
            message: 'License',
            default: config.license,
            choices: [
              {
                name: 'ISC',
                value: 'isc'
              },
              {
                name: 'MIT',
                value: 'mit'
              },
              {
                name: 'Apache',
                value: 'apache'
              }
            ]
          }
        ];
      })
      .then(() => this.prompt(prompts))
      .then(answers => {
        this.config.set('create', merge(this.config.get('create'), answers));
      });
  }

  configuring() {
    this.config.save();
  }

  default() {
    return github.createRepository(this.config.get('create'))
      .then(repo => {
        this.config.set('create', merge(this.config.get('create'), { urls: [ repo.html_url, repo.ssh_url ] }));
        this.config.save();
      });
  }

}

module.exports = GitCreateGenerator;
