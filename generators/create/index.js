'use strict';

var _yeomanGenerator = require('yeoman-generator');

var _github = require('../shared/github');

var github = _interopRequireWildcard(_github);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.find');

var _lodash4 = _interopRequireDefault(_lodash3);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class GitCreateGenerator extends _yeomanGenerator.Base {

  constructor(...args) {
    super(...args);

    this.option('skip-prompt', {
      type: String,
      required: false,
      alias: 's',
      desc: 'Skip prompting.  You will either need to supply all arguments or the defaults will be used.'
    });

    this.option('autoinit', {
      type: String,
      alias: 'a',
      defaults: false,
      desc: 'AutoInit: Add license and README to remote repository'
    });

    this.option('user', {
      type: String,
      alias: 'u',
      desc: 'Github Username. Creates the repository on the user',
      defaults: false
    });

    this.option('org', {
      type: String,
      alias: 'o',
      desc: 'Organization. Creates the repository on the org not the user',
      defaults: false
    });

    this.option('name', {
      type: String,
      alias: 'n',
      desc: 'Repository Name',
      defaults: _path2.default.basename(process.cwd())
    });

    this.option('description', {
      type: String,
      alias: 'd',
      desc: 'Repository Description',
      defaults: 'Repository generated by generator-github-create'
    });

    this.option('private', {
      type: String,
      alias: 'd',
      desc: 'Repository Access.  private|public',
      defaults: false
    });

    this.option('license', {
      type: String,
      alias: 'l',
      desc: 'Repository License.  isc|mit|apache',
      defaults: 'isc'
    });
  }

  initializing() {
    //Authenticate Github API
    /* istanbul ignore if */
    if (!github.get()) {
      this.composeWith('github-create:authenticate');
    }

    let config = {
      'skip-prompt': this.options['skip-prompt'],
      autoinit: this.options.autoinit,
      name: this.options.name,
      description: this.options.description,
      private: this.options.private,
      license: this.options.license,
      org: this.options.org,
      user: this.options.user
    };

    this.config.set('create', config);
    return this.config.save();
  }

  prompting() {
    let config = this.config.get('create');

    if (config['skip-prompt']) {
      return true;
    }

    return github.getRepos(config).then(repos => {
      return [{
        name: 'name',
        message: 'Repository Name',
        validate: input => {
          return (0, _lodash4.default)(repos, { name: input }) ? input + ' repository exists.' : true;
        },
        default: config.name
      }, {
        name: 'description',
        message: 'Repository Description',
        default: config.description
      }, {
        type: 'list',
        name: 'private',
        message: 'Access',
        default: config.private,
        choices: [{
          name: 'Public',
          value: false
        }, {
          name: 'Private - You have to pay for this',
          value: true
        }]
      }, {
        type: 'list',
        name: 'license',
        message: 'License',
        default: config.license,
        choices: [{
          name: 'ISC',
          value: 'isc'
        }, {
          name: 'MIT',
          value: 'mit'
        }, {
          name: 'Apache',
          value: 'apache'
        }]
      }];
    }).then(prompts => this.prompt(prompts)).then(answers => {
      //Hack to save user from authenticate config
      /* istanbul ignore if */
      if (!config.user) {
        answers.user = this.config.get('authenticate').username || undefined;
      }

      this.config.set('create', (0, _lodash2.default)(this.config.get('create'), answers));
    });
  }

  configuring() {
    this.config.save();
  }

  default() {
    return github.createRepository(this.config.get('create')).then(repo => {
      this.config.set('create', (0, _lodash2.default)(this.config.get('create'), { urls: [repo.html_url, repo.ssh_url] }));
      this.config.save();
    });
  }

}

module.exports = GitCreateGenerator;